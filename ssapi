#!/usr/bin/env python3

#############################################################
## PPS 2 SmartSuiteAPI Module V2 -- Created by Whit3y 2023 ##
#############################################################

## Usage:
## Import this module, and use 3 functions, passing the scan
##
## outboundShipIDCall()
## outboundFBAIDCall()
## inboundTrackingCall()

## Return Dictionary Objects
##
## Status: "Success"|"Fail"|"Error"
## apiStatus: <API status code>
## itemsReturned: <Number of items returned from the API call>
##
## outboundShipIDCall
## 		shipToAmazon: True|False
## 		fbaTracking: <FBA Tracking number>
##
## outboundFBAIDCall
## 		outboundShipmentID: <Outbound Shipment ID>
##
## inboundTrackingCall
##		inboundShipmentID: <Inbound Shipment ID>
##		Error: "Unknown"|"Too many results"



#imports

import requests 
import json
import re
import time

#Variables
#Variables App IDs
outboundShipmentsAppID = "xxx"
inboundShipmentsAppID = "xxx"
seaShipmentsAppID = "xxx"
airShipmentsAppID = "xxx"
landShipmentsAppID = "xxx"
subShipmentsFromVendorAppID = "xxx"
subShipmentsToWarehouseAppID = "xxx"

#Variables Field IDs
outboundShipFID = "xxx"
outboundShipToTypeFID = "xxx"
outboundShipFBAFID = "xxx"
inboundShipFID = "xxx"
seaOceanBOLFID = "xxx"
seaShipIDFID = "xxx"
airAWBFID = "xxx"
airShipIDFID = "xxx"
landBOLFID = "xxx"
landPROFID = "xxx"
landTrackingFID = "xxx"
landShipIDFID = "xxx"
subFromVendorTrackingFID = "xxx"
subFromVendorShipIDFID = "xxx"
subToWarehouseTrackingFID = "xxx"
subToWarehouseShipIDFID = "xxx"

#Variables Entry Unique IDs
shipToTypeAmazon = "xxx"


#Variables for API Call
apiKey = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
accountID = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

#Functions

#Make the API call
def smartSuiteAPI(apiMethod, url, payload):
	apiurl = url
	apipayload = payload
	headers = {
	'Authorization': apiKey,
	'ACCOUNT-ID': accountID,
	'Content-Type': 'application/json'
	}
	
	apiResponse = requests.request(apiMethod, apiurl, headers=headers, data=apipayload)
	
	return apiResponse

#########################
###### Outbound Functions
#########################

#Outbound Shipping ID check if FBA
def outboundShipIDCall(shippingID):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + outboundShipmentsAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "and",
			"fields": [{
				"comparison": "is",
				"field": outboundShipFID,
				"value": shippingID
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("Outbound Shipping ID: " + shippingID + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("Outbound Shipping ID: " + shippingID + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['Status'] = "Success"
	returnDict['itemsReturned'] = apiResponse.json()['total']
	# Check if FBA label is expected
	if apiResponse.json()['items'][0][outboundShipToTypeFID] == shipToTypeAmazon:
		#Set dictionary entry to reflect
		returnDict['shipToAmazon'] = True
		fbaTracking = apiResponse.json()['items'][0][outboundShipFBAFID]
		returnDict['fbaTracking'] = fbaTracking
	# If not shipping to Amazon, set dictionary to reflect
	else:
		returnDict['shipToAmazon'] = False
	
	return returnDict

#Outbound FBA ID, get Shipping ID
def outboundFBAIDCall(FBAID):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + outboundShipmentsAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "and",
			"fields": [{
				"comparison": "is",
				"field": outboundShipFBAFID,
				"value": FBAID
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("FBA Shipping ID: " + FBAID + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("FBA Shipping ID: " + FBAID + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['Status'] = "Success"
	returnDict['itemsReturned'] = apiResponse.json()['total']
	#Add dictionary entry with OutboundShipmentID
	outboundShipmentID = apiResponse.json()['items'][0][outboundShipFID]
	returnDict['outboundShipmentID'] = outboundShipmentID
	
	return returnDict


########################
###### Inbound Functions
########################

#Inbound Land Call
def inboundLandTrackingCall(inboundTracking, comparison):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + landShipmentsAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "or",
			"fields": [{
				"comparison": comparison,
				"field": landBOLFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": landBOLFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				},{
				"comparison": comparison,
				"field": landPROFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": landPROFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				},{
				"comparison": comparison,
				"field": landTrackingFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": landTrackingFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("Land Tracking ID: " + inboundTracking + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("Land Tracking ID: " + inboundTracking + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['itemsReturned'] = apiResponse.json()['total']
	returnDict['Status'] = "Success"
	
	#Use Land Shipment Field ID to make GET request to get Inbound Shipment ID from "inboundShipmentsAppID"
	url = "https://app.smartsuite.com/api/v1/applications/" + inboundShipmentsAppID + "/records/" + apiResponse.json()['items'][0][landShipIDFID][0]
	payload = json.dumps({})
	
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("GET", url, payload)
	
	
	#Add dictionary entry with Inbound Shipment ID
	returnDict['inboundShipmentID'] = apiResponse.json()['title']
	
	return returnDict

#Inbound Air Call
def inboundAirTrackingCall(inboundTracking, comparison):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + airShipmentsAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "or",
			"fields": [{
				"comparison": comparison,
				"field": airAWBFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": airAWBFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				},{
				"comparison": comparison,
				"field": airAWBFID,
				#Inset hypen after 3rd digit, if 11 numbers with no hyphen
				"value": re.sub(r'(\d{3})(\d{8})',r'\1-\2',inboundTracking)
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("Air Tracking ID: " + inboundTracking + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("Air Tracking ID: " + inboundTracking + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['itemsReturned'] = apiResponse.json()['total']
	returnDict['Status'] = "Success"
	
	#Use Air Shipment Field ID to make GET request to get Inbound Shipment ID from "inboundShipmentsAppID"
	url = "https://app.smartsuite.com/api/v1/applications/" + inboundShipmentsAppID + "/records/" + apiResponse.json()['items'][0][airShipIDFID][0]
	payload = json.dumps({})
	
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("GET", url, payload)
	
	
	#Add dictionary entry with Inbound Shipment ID
	returnDict['inboundShipmentID'] = apiResponse.json()['title']
	
	return returnDict

#Inbound Sea Call
def inboundSeaTrackingCall(inboundTracking, comparison):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + seaShipmentsAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "or",
			"fields": [{
				"comparison": comparison,
				"field": seaOceanBOLFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": seaOceanBOLFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("Sea Tracking ID: " + inboundTracking + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("Sea Tracking ID: " + inboundTracking + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['itemsReturned'] = apiResponse.json()['total']
	returnDict['Status'] = "Success"
	
	#Use Sea Shipment Field ID to make GET request to get Inbound Shipment ID from "inboundShipmentsAppID"
	url = "https://app.smartsuite.com/api/v1/applications/" + inboundShipmentsAppID + "/records/" + apiResponse.json()['items'][0][seaShipIDFID][0]
	payload = json.dumps({})
	
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("GET", url, payload)
	
	
	#Add dictionary entry with Inbound Shipment ID
	returnDict['inboundShipmentID'] = apiResponse.json()['title']
	
	return returnDict

#Inbound Sub From Vendor Call
def inboundSubFromVendorTrackingCall(inboundTracking, comparison):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + subShipmentsFromVendorAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "or",
			"fields": [{
				"comparison": comparison,
				"field": subFromVendorTrackingFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": subFromVendorTrackingFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("Sub-Shipment From Vendor Tracking ID: " + inboundTracking + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("Sub-Shipment From Vendor Tracking ID: " + inboundTracking + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['itemsReturned'] = apiResponse.json()['total']
	returnDict['Status'] = "Success"
	
	#Use Sub Shipment From Vendor Field ID to make GET request to get Inbound Shipment ID from "inboundShipmentsAppID"
	url = "https://app.smartsuite.com/api/v1/applications/" + inboundShipmentsAppID + "/records/" + apiResponse.json()['items'][0][subFromVendorShipIDFID][0]
	payload = json.dumps({})
	
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("GET", url, payload)
	
	
	#Add dictionary entry with Inbound Shipment ID
	returnDict['inboundShipmentID'] = apiResponse.json()['title']
	
	return returnDict

#Inbound Sub To Warehouse Call
def inboundSubToWarehouseTrackingCall(inboundTracking, comparison):
	#build the return dictionary
	returnDict = {}
	# Build URL
	url = "https://app.smartsuite.com/api/v1/applications/" + subShipmentsToWarehouseAppID + "/records/list/"
	# Build payload
	payload = json.dumps({
		"filter": {
			"operator": "or",
			"fields": [{
				"comparison": comparison,
				"field": subToWarehouseTrackingFID,
				"value": inboundTracking
				},{
				"comparison": comparison,
				"field": subToWarehouseTrackingFID,
				#Remove all non Alphanumeric chars
				"value": re.sub('[^0-9a-zA-Z]+','',inboundTracking)
				}]}})
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("POST", url, payload)
	
	#If status code not good, exit
	if apiResponse.status_code != 200:
		print("Status code: " + apiResponse.status_code)
		returnDict['Status'] = "Fail"
		returnDict['apiStatus'] = apiResponse.status_code
		#Run "error" notification function
		######-----------BUILD FUNCTION
		return returnDict
	
	# Check if theres a result
	# if 0 = no result
	if apiResponse.json()['total'] == 0:
		print("Sub-Shipment To Warehouse Tracking ID: " + inboundTracking + " not found in the database")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "not found" notification function
		return returnDict
	#if more than 1 result
	if apiResponse.json()['total'] > 1:
		print("Sub-Shipment To Warehouse Tracking ID: " + inboundTracking + " has " + apiResponse.json()['total'] + " results")
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponse.json()['total']
		#Run "too many results" notification function
		return returnDict
	
	#if niether of previous failes we assume that theres 1 response
	returnDict['itemsReturned'] = apiResponse.json()['total']
	returnDict['Status'] = "Success"
	
	#Use Sub Shipment To Warehouse Field ID to make GET request to get Inbound Shipment ID from "inboundShipmentsAppID"
	url = "https://app.smartsuite.com/api/v1/applications/" + inboundShipmentsAppID + "/records/" + apiResponse.json()['items'][0][subToWarehouseShipIDFID][0]
	payload = json.dumps({})
	
	# Call the API and store results as variable
	apiResponse = smartSuiteAPI("GET", url, payload)
	
	
	#Add dictionary entry with Inbound Shipment ID
	returnDict['inboundShipmentID'] = apiResponse.json()['title']
	
	return returnDict

#Inbound Tracking Call (Uses the previous calls)
def inboundTrackingCall(inboundTracking):
	#build the return dictionary
	returnDict = {}
	
	##(Series Call)
	#Start by going through each option with an "is" comparitor, if one hits, return the response
	#Try Land Call
	apiResponseLand = inboundLandTrackingCall(inboundTracking, "is")
	if apiResponseLand['Status'] == "Success":
		return apiResponseLand
	#Try Air Call
	apiResponseAir = inboundAirTrackingCall(inboundTracking, "is")
	if apiResponseAir['Status'] == "Success":
		return apiResponseAir
	#Try Sea Call
	apiResponseSea = inboundSeaTrackingCall(inboundTracking, "is")
	if apiResponseSea['Status'] == "Success":
		return apiResponseSea
	#Try Sub From Vendor Call
	apiResponseFromVen = inboundSubFromVendorTrackingCall(inboundTracking, "is")
	if apiResponseFromVen['Status'] == "Success":
		return apiResponseFromVen
	#Try Sub To Warehouse Call
	apiResponseToWare = inboundSubToWarehouseTrackingCall(inboundTracking, "is")
	if apiResponseToWare['Status'] == "Success":
		return apiResponseToWare
	
	
	##(Parallel Call)
	#Go through all options with an "contains" comparitor
	#	if any hits with more than 1 result, fail right away
	#	if any hits with 1, add to "partialIDCall" array
	
	#Build the partialIDCall array
	partialIDCall = []
	
	#Land Call
	apiResponseLand = inboundLandTrackingCall(inboundTracking, "contains")
	#if itemsReturned is more than 2, Fail
	if apiResponseLand['itemsReturned'] > 1:
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponseLand['itemsReturned']
		returnDict['Error'] = "Too many results"
		return returnDict
	#if itemsReturned is 1, add (append) to partialIDCall array
	if apiResponseLand['itemsReturned'] == 1:
		partialIDCall.append(apiResponseLand)
	
	#Air Call
	apiResponseAir = inboundAirTrackingCall(inboundTracking, "contains")
	#if itemsReturned is more than 2, Fail
	if apiResponseAir['itemsReturned'] > 1:
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponseAir['itemsReturned']
		returnDict['Error'] = "Too many results"
		return returnDict
	#if itemsReturned is 1, add (append) to partialIDCall array
	if apiResponseAir['itemsReturned'] == 1:
		partialIDCall.append(apiResponseAir)
	
	#Sea Call
	apiResponseSea = inboundSeaTrackingCall(inboundTracking, "contains")
	#if itemsReturned is more than 2, Fail
	if apiResponseSea['itemsReturned'] > 1:
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponseSea['itemsReturned']
		returnDict['Error'] = "Too many results"
		return returnDict
	#if itemsReturned is 1, add (append) to partialIDCall array
	if apiResponseSea['itemsReturned'] == 1:
		partialIDCall.append(apiResponseSea)
	
	#Sub From Vendor Call
	apiResponseFromVen = inboundSubFromVendorTrackingCall(inboundTracking, "contains")
	#if itemsReturned is more than 2, Fail
	if apiResponseFromVen['itemsReturned'] > 1:
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponseFromVen['itemsReturned']
		returnDict['Error'] = "Too many results"
		return returnDict
	#if itemsReturned is 1, add (append) to partialIDCall array
	if apiResponseFromVen['itemsReturned'] == 1:
		partialIDCall.append(apiResponseFromVen)
	
	#Try Sub To Warehouse Call
	apiResponseToWare = inboundSubToWarehouseTrackingCall(inboundTracking, "contains")
	#if itemsReturned is more than 2, Fail
	if apiResponseToWare['itemsReturned'] > 1:
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = apiResponseToWare['itemsReturned']
		returnDict['Error'] = "Too many results"
		return returnDict
	#if itemsReturned is 1, add (append) to partialIDCall array
	if apiResponseToWare['itemsReturned'] == 1:
		partialIDCall.append(apiResponseToWare)
	
	
	#if partialIDCall is empty, return status failed with 0 hits
	if len(partialIDCall) == 0:
		#Add to returnDictionary
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = 0
		return returnDict
	
	#if partialIDCall has 1 item, return it
	if len(partialIDCall) == 1:
		return partialIDCall[0]
	
	#if partialIDCall has more than 1 item, check if the rest inboundShipmentID, match the first, if so, return the first dictionary
	if all(d['inboundShipmentID'] == partialIDCall[0]['inboundShipmentID'] for d in partialIDCall):
		return partialIDCall[0]
	#else return a fail with too many results
	else:
		returnDict['Status'] = "Fail"
		returnDict['itemsReturned'] = len(partialIDCall)
		returnDict['Error'] = "Too many results"
		return returnDict
